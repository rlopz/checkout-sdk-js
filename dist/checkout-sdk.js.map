{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/memoize.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/data-store/data-store-projection.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","withMemoizedCombiner","_utility_memoize__WEBPACK_IMPORTED_MODULE_0__","creator","args","_i","arguments","combiner","pop","apply","concat","combinerArgs","result","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","external_shallowequal_","onExpire","external_lodash_","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","slice","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","memoize","fn","shallowequal__WEBPACK_IMPORTED_MODULE_2__","cache","Map","resolver","_cache_key_resolver__WEBPACK_IMPORTED_MODULE_3__","delete","memoized","lodash__WEBPACK_IMPORTED_MODULE_1__","memoizeOne","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","target","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","instanceMethods","set","cache_key_resolver","external_rxjs_","pipe","operators_","store","bindDecorator","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","isPlainObject","arrayReplace","currentArray","newArray","matchObject","a","b","newItemCount","countNewItem","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","_","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getGrandTotal","useStoreCredit","grandTotal","storeCredit","max","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","memoizedMethod","bind_decorator","cachedValue","is_private","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromOrder","providerTransactionId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_cardinalClient","_placeOrderUsing3DS","_placeOrder","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","CardBrand","DigitalWalletType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","ErrorDescription","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","paymentIntent","_getStripeJs","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","handleCardPayment","stripeResponse","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","DataStoreProjection","_transformState","_state$","getValue","stateA","stateB","filterFn","unsubscribe","memoizedCloneDeep","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","data_store_projection","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 143);\n","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"tslib\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(combiner(...combinerArgs));\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let newItemCount = 0;\n\n    const countNewItem = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        newItemCount += replacedValue === newValue && replacedValue !== currentValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countNewItem(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countNewItem(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countNewItem(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countNewItem(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    if (newItemCount === 0 && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    if (newItemCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport type RemoteCheckoutStateData =\n    { amazon?: AmazonPayRemoteCheckout } &\n    { afterpay?: AfterpayRemoteCheckout };\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertifcates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoize, memoizeOne } from '../common/utility';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { Address } from '../address';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getGrandTotal,\n        getGrandTotal => (useStoreCredit: boolean = false) => {\n            const grandTotal = getGrandTotal(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../../common/selector';\nimport { memoizeOne } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getGrandTotal(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getGrandTotal = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getGrandTotal: getGrandTotal(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromOrder(): string | undefined {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        return order ? order.providerTransactionId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromOrder();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((resolve, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {\n                            });\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { CreditCardInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(this._paymentMethod.config.testMode)\n                    .then(() => this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.config) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentMethod.config.is3dsEnabled ?\n            this._placeOrderUsing3DS(order, payment, options, this._paymentMethod.clientToken) :\n            this._placeOrder(order, payment, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _placeOrderUsing3DS(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions, clientToken?: string): Promise<InternalCheckoutSelectors> {\n        if (!clientToken) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        const paymentData = payment.paymentData as CreditCardInstrument;\n\n        return this._cardinalClient.configure(clientToken)\n            .then(() => this._cardinalClient.runBinProcess(this._getBinNumber(paymentData)))\n            .then(() => {\n                return this._placeOrder(order, payment, options)\n                    .catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        return this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData(paymentData))\n                            .then(threeDSecure =>\n                                this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: {\n                                        ...paymentData,\n                                        threeDSecure,\n                                    },\n                                }))\n                            );\n                    });\n            });\n    }\n\n    private _placeOrder(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            );\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n        }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                resolve({ token: jwt });\n                                break;\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    reject(new StandardError(data.ErrorDescription));\n                                } else {\n                                    resolve({ token: jwt });\n                                }\n                                break;\n                            case CardinalValidatedAction.Failure:\n                                reject(new StandardError('User failed authentication or an error was encountered while processing the transaction'));\n                                break;\n                            case CardinalValidatedAction.Error:\n                                reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n        });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CardinalSDK> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentRequestSender from '../../payment-request-sender';\nimport PaymentRequestTransformer from '../../payment-request-transformer';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader,\n        private _paymentRequestSender: PaymentRequestSender,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement,\n                            this._mapStripePaymentMethodOptions()\n                        ).then(stripePaymentMethod => {\n                            if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                            }\n\n                            if (!paymentIntent) {\n                                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                            }\n\n                            const stripeCardPaymentOptions = {\n                                ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                payment_method: stripePaymentMethod.paymentMethod.id,\n                            };\n\n                            return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                        })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CyberSourcePaymentStrategy\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalClient(new CardinalScriptLoader(scriptLoader))\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader),\n            paymentRequestSender,\n            paymentRequestTransformer\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Action, DataStore, Filter, ReadableDataStore, Subscriber, SubscribeOptions, Unsubscriber } from '@bigcommerce/data-store';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { isEqual } from '../utility';\n\nexport default class DataStoreProjection<TState, TTransformedState = TState> implements ReadableDataStore<TTransformedState> {\n    private _state$: BehaviorSubject<TTransformedState>;\n\n    constructor(\n        private _store: DataStore<any, Action, TState>,\n        private _transformState: (state: TState) => TTransformedState\n    ) {\n        this._state$ = new BehaviorSubject(this._transformState(this._store.getState()));\n\n        this._store.subscribe(state => {\n            this._state$.next(this._transformState(state));\n        });\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n        const subscription = this._state$\n            .pipe(distinctUntilChanged((stateA, stateB) =>\n                filters.length > 0 ?\n                    filters.every(filterFn => isEqual(filterFn(stateA), filterFn(stateB))) :\n                    false\n            ))\n            .subscribe(subscriber);\n\n        return subscription.unsubscribe;\n    }\n}\n","import { cloneDeep, memoize } from 'lodash';\n\nconst memoizedCloneDeep = memoize(cloneDeep);\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\nmemoizedCloneDeep.cache = new WeakMap() as any;\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => {\n        const result = fn(...args);\n\n        return result && typeof result === 'object'\n            ? memoizedCloneDeep(result)\n            : result;\n    }) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone, memoizeOne } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors, { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<InternalCheckoutSelectors, CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = new DataStoreProjection(this._store, createCheckoutSelectors);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: CheckoutSelectors) => filter(state))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}