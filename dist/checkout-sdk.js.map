{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/errors/payment-method-not-allowed-error.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionType","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","isPlainObject","lodash__WEBPACK_IMPORTED_MODULE_0__","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","PaymentMethodClientUnavailableError","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","withMemoizedCombiner","_bigcommerce_memoize__WEBPACK_IMPORTED_MODULE_0__","creator","args","_i","arguments","combiner","pop","apply","concat","combinerArgs","result","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","CheckoutIncludes","_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","fn","instanceMethods","set","memoize_","external_rxjs_","pipe","operators_","store","bindDecorator","target","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_6__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","external_lodash_","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","is_plain_object","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","slice","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getGrandTotal","useStoreCredit","grandTotal","storeCredit","max","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","bind_decorator","cachedValue","getUsedCount","is_private","cache","getKey","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","iframe_resizer","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","maxSize","external_shallowequal_","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressRequestSender","createAddress","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","isGuest","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","payment_method_client_unavailable_error","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","PaymentMethodNotAllowedError","AmazonPayPaymentStrategy","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","paymentMethodNotAllowed","payment_method_not_allowed_error","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","PaymentMethodFailedError","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","payment_method_failed_error","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalThreeDSecureFlow","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","three_ds_result","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","PaReq","TermUrl","callback_url","MD","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_threeDSecureFlow","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","ProjectionActionType","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","ErrorMessageTransformer","_messageCustomizer","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal","UnableToContinueAsGuestError","billing_address_action_creator_BillingAddressActionCreator","BillingAddressActionCreator","unable_to_continue_as_guest_error","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 148);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport type RemoteCheckoutStateData =\n    { amazon?: AmazonPayRemoteCheckout } &\n    { afterpay?: AfterpayRemoteCheckout };\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertifcates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getGrandTotal,\n        getGrandTotal => (useStoreCredit: boolean = false) => {\n            const grandTotal = getGrandTotal(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getGrandTotal(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getGrandTotal = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getGrandTotal: getGrandTotal(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return () => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodNotAllowedError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'The selected payment method is not allowed for this transaction. Please choose another payment method.' });\n\n        this.name = 'PaymentMethodNotAllowedError';\n        this.type = 'payment_method_not_allowed';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethodNotAllowedError from '../../errors/payment-method-not-allowed-error';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        if (!payload.payment) {\n            return Promise.reject(new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.'));\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (amazon && amazon.billing && amazon.billing.paymentMethodNotAllowed) {\n                    throw new PaymentMethodNotAllowedError();\n                }\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}